user www-data;
worker_processes 4;
#pid /run/nginx.pid;
daemon off;

env REDIS_URL;
env REDIS_PORT_6379_TCP;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;

	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##
	
	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Server Settings
	##

	server {
		listen 80 default_server;
		root /usr/share/nginx/html;
		index index.html index.htm;

		location / {
			set $upstream "";
	
			rewrite_by_lua '
				local redis = require "nginx.redis"

				local redis_url = os.getenv("REDIS_URL");
				if not redis_url then
					redis_url = os.getenv("REDIS_PORT_6379_TCP");
				end

				if not redis_url then
					ngx.log(ngx.STDERR, "REDIS_URL or REDIS_PORT_6379_TCP not set");
					ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
				end

				local scheme, host, _, port = string.match(redis_url, "^(%w+)://([a-zA-Z0-9._-]+)(:(%d+))??")
				if scheme ~= "redis" and scheme ~= "tcp" then
					ngx.log(ngx.STDERR, "unsupported scheme");
					ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
				end
				if not host then
					ngx.log(ngx.STDERR, "redis host is nil");
					ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
				end
				if not port then
					port = 6379
				end
	
				local client = redis:new()
				local ok, err = client:connect(host, port)
				if not ok then
					ngx.log(ngx.STDERR, err);
					ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
				end
	
				local res, err = client:get(ngx.var.host)
        if err then
					ngx.log(ngx.STDERR, err);
					ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
				end
	
				if res == ngx.null then
					ngx.exit(ngx.HTTP_NOT_FOUND)
        else
					ngx.var.upstream = res
				end
			';

			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwrded-Host $host;
			proxy_set_header X-Forwrded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded_Proto $scheme;
			proxy_pass http://$upstream;

			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
	}
}
